version: "3"
services:
  app:
    container_name: app
    image: localhost:5000/rpmsserver:1.0
    build:
      context: ./
      dockerfile: app.dockerfile
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - "3000:3000"
    networks:
      - webnet
    command: npm run start
    volumes:
      - ./:/usr/src/app
      - ./node_modules:/usr/src/app/node_modules
    depends_on:
      - mongo
      - redis
      - mqtt


  mongo:
    container_name: mongo
    image: mongo
    volumes:
      - mongo:/data/db
    ports:
      - "27017:27017"
    logging:
      driver: "none"
    networks:
      - webnet

  redis:
    container_name: redis
    image: redis
    volumes:
      - redis:/data
    ports:
      - "63791:6379"
    logging:
      driver: "none"
    networks:
      - webnet

  mqtt:
    container_name: mqtt
    image: localhost:5000/rpmsmqtt:1.0
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - "1883:1883"
    depends_on:
      - mongo
    networks:
      - webnet

  frontend:
    container_name: frontend
    image: localhost:5000/rpmsfrontend:1.0
    ports:
      - "8000:80"
    networks:
      - webnet

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet

volumes:
  mongo:
  redis:

networks:
  webnet:
